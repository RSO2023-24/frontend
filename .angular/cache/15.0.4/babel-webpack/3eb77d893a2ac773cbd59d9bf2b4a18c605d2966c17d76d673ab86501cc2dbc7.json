{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction HikesComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const trail_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", trail_r1.name, \" \");\n  }\n}\nexport class HikesComponent {\n  constructor(http) {\n    this.http = http;\n    this.difficulty = 1;\n    this.latitude = 0;\n    this.longitude = 0;\n    this.maxDistance = 0;\n    this.trails = [];\n  }\n  onSubmit() {\n    this.http.get(`https://mapzs.pzs.si/api/search/pois?trailTypes=1&difficulty=${this.difficulty}`).subscribe(data => {\n      this.trails = data.tracks.map(track => {\n        // Assign random latitude and longitude values\n        const latitude = Math.random() * (46.8769 - 45.4215) + 45.4215;\n        const longitude = Math.random() * (16.6105 - 13.3753) + 13.3753;\n        return {\n          name: track.name,\n          difficulty: track.difficulty,\n          distance: track.distance,\n          duration: track.duration,\n          latitude: latitude,\n          longitude: longitude\n        };\n      }).filter(trail => {\n        // Calculate distance between user and trail location\n        const distance = this.calculateDistance(this.latitude, this.longitude, trail.latitude, trail.longitude);\n        return distance <= this.maxDistance;\n      });\n    });\n  }\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371; // Radius of the Earth in kilometers\n    const dLat = this.degreesToRadians(lat2 - lat1);\n    const dLon = this.degreesToRadians(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.degreesToRadians(lat1)) * Math.cos(this.degreesToRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distance in kilometers\n    return distance;\n  }\n  degreesToRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  }\n}\nHikesComponent.ɵfac = function HikesComponent_Factory(t) {\n  return new (t || HikesComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nHikesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HikesComponent,\n  selectors: [[\"app-hikes\"]],\n  decls: 26,\n  vars: 5,\n  consts: [[1, \"container\"], [1, \"left\"], [3, \"ngSubmit\"], [\"for\", \"difficulty\"], [\"type\", \"number\", \"id\", \"difficulty\", \"name\", \"difficulty\", \"min\", \"1\", \"max\", \"4\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"latitude\"], [\"type\", \"number\", \"id\", \"latitude\", \"name\", \"latitude\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"longitude\"], [\"type\", \"number\", \"id\", \"longitude\", \"name\", \"longitude\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"maxDistance\"], [\"type\", \"number\", \"id\", \"maxDistance\", \"name\", \"maxDistance\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", \"value\", \"Search\"], [1, \"right\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function HikesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function HikesComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\", 3);\n      i0.ɵɵtext(4, \"Difficulty:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"br\");\n      i0.ɵɵelementStart(6, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function HikesComponent_Template_input_ngModelChange_6_listener($event) {\n        return ctx.difficulty = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"br\");\n      i0.ɵɵelementStart(8, \"label\", 5);\n      i0.ɵɵtext(9, \"Latitude:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"br\");\n      i0.ɵɵelementStart(11, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function HikesComponent_Template_input_ngModelChange_11_listener($event) {\n        return ctx.latitude = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"br\");\n      i0.ɵɵelementStart(13, \"label\", 7);\n      i0.ɵɵtext(14, \"Longitude:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"br\");\n      i0.ɵɵelementStart(16, \"input\", 8);\n      i0.ɵɵlistener(\"ngModelChange\", function HikesComponent_Template_input_ngModelChange_16_listener($event) {\n        return ctx.longitude = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"br\");\n      i0.ɵɵelementStart(18, \"label\", 9);\n      i0.ɵɵtext(19, \"Max Distance:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"br\");\n      i0.ɵɵelementStart(21, \"input\", 10);\n      i0.ɵɵlistener(\"ngModelChange\", function HikesComponent_Template_input_ngModelChange_21_listener($event) {\n        return ctx.maxDistance = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(22, \"br\")(23, \"input\", 11);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(24, \"div\", 12);\n      i0.ɵɵtemplate(25, HikesComponent_div_25_Template, 2, 1, \"div\", 13);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.difficulty);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.latitude);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.longitude);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.maxDistance);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.trails);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.MinValidator, i3.MaxValidator, i3.NgModel, i3.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","HikesComponent","constructor","http","onSubmit","get","difficulty","subscribe","data","trails","tracks","map","track","latitude","Math","random","longitude","name","distance","duration","filter","trail","calculateDistance","maxDistance","lat1","lon1","lat2","lon2","R","dLat","degreesToRadians","dLon","a","sin","cos","c","atan2","sqrt","degrees","PI","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/lucas/Documents/FRI/frontend/src/app/components/hikes/hikes.component.html","/Users/lucas/Documents/FRI/frontend/src/app/components/hikes/hikes.component.ts"],"sourcesContent":["<div class=\"container\">\n    <div class=\"left\">\n        <form (ngSubmit)=\"onSubmit()\">\n            <label for=\"difficulty\">Difficulty:</label><br>\n            <input type=\"number\" id=\"difficulty\" name=\"difficulty\" min=\"1\" max=\"4\" [(ngModel)]=\"difficulty\"><br>\n            <label for=\"latitude\">Latitude:</label><br>\n            <input type=\"number\" id=\"latitude\" name=\"latitude\" [(ngModel)]=\"latitude\"><br>\n            <label for=\"longitude\">Longitude:</label><br>\n            <input type=\"number\" id=\"longitude\" name=\"longitude\" [(ngModel)]=\"longitude\"><br>\n            <label for=\"maxDistance\">Max Distance:</label><br>\n            <input type=\"number\" id=\"maxDistance\" name=\"maxDistance\" [(ngModel)]=\"maxDistance\"><br>\n            <input type=\"submit\" value=\"Search\">\n        </form>\n    </div>\n    <div class=\"right\">\n        <div *ngFor=\"let trail of trails\">\n            {{ trail.name }}\n        </div>\n    </div>\n</div>","import { Component } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\n\ninterface HikingTrail {\n  name: string;\n  difficulty: number;\n  distance: number;\n  duration: number;\n  latitude: number;\n  longitude: number;\n}\n\ninterface ApiTrack {\n  name: string;\n  difficulty: number;\n  distance: number;\n  duration: number;\n}\n\n@Component({\n  selector: 'app-hikes',\n  templateUrl: './hikes.component.html',\n  styleUrls: ['./hikes.component.css']\n})\nexport class HikesComponent {\n  difficulty = 1;\n  latitude = 0;\n  longitude = 0;\n  maxDistance = 0;\n  trails: HikingTrail[] = [];\n\n  constructor(private http: HttpClient) {}\n\n  onSubmit(): void {\n    this.http.get<{tracks: ApiTrack[]}>(`https://mapzs.pzs.si/api/search/pois?trailTypes=1&difficulty=${this.difficulty}`)\n        .subscribe(data => {\n          this.trails = data.tracks.map((track: ApiTrack) => {\n            // Assign random latitude and longitude values\n            const latitude = Math.random() * (46.8769 - 45.4215) + 45.4215;\n            const longitude = Math.random() * (16.6105 - 13.3753) + 13.3753;\n            return {\n              name: track.name,\n              difficulty: track.difficulty,\n              distance: track.distance,\n              duration: track.duration,\n              latitude: latitude,\n              longitude: longitude\n            };\n          })\n              .filter((trail: HikingTrail) => {\n                // Calculate distance between user and trail location\n                const distance = this.calculateDistance(this.latitude, this.longitude, trail.latitude, trail.longitude);\n                return distance <= this.maxDistance;\n              });\n        });\n  }\n\n  calculateDistance(lat1:number, lon1:number, lat2:number, lon2:number) {\n    const R = 6371; // Radius of the Earth in kilometers\n    const dLat = this.degreesToRadians(lat2 - lat1);\n    const dLon = this.degreesToRadians(lon2 - lon1);\n\n    const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(this.degreesToRadians(lat1)) * Math.cos(this.degreesToRadians(lat2)) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n    ;\n\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distance in kilometers\n\n    return distance;\n  }\n\n  degreesToRadians(degrees:number) {\n    return degrees * (Math.PI / 180);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}