{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environment/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ServiceService {\n  constructor(http) {\n    this.http = http;\n    this.hikesUrl = environment['url'] + '/hike/v1/hikes';\n    this.userUrl = environment['url'] + '/hiker/v1/users';\n    this.locationUrl = environment['url'] + '/location/v1/location';\n  }\n  getHikes(lat, lon, distance, difficulty) {\n    // Define the parameters\n    let params = new HttpParams().set('lat', String(lat)).set('lon', String(lon)).set('distance', String(distance)).set('difficulty', String(difficulty));\n    // Make the GET request and return the result\n    return this.http.get(this.hikesUrl, {\n      params: params\n    });\n  }\n  signIn(firstName, lastName) {\n    // Make the GET request and return the result\n    return this.http.get(this.userUrl + '/1');\n  }\n  createUser(firstName, lastName) {\n    // Define the headers\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    // Define the body\n    let body = {\n      \"firstName\": firstName,\n      \"lastName\": lastName,\n      \"age\": 25,\n      \"skill\": 1,\n      \"sex\": \"Male\",\n      \"longtitude\": 45.1234,\n      \"latitude\": 12.5678\n    };\n    // Make the POST request and return the result\n    return this.http.post(this.userUrl, body, {\n      headers: headers\n    });\n  }\n  getLocations() {\n    return this.http.get(this.locationUrl);\n  }\n  getWeather(lat, long) {\n    let endpoint = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${long}&current=temperature_2m,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m`;\n    return this.http.get(endpoint);\n  }\n}\nServiceService.ɵfac = function ServiceService_Factory(t) {\n  return new (t || ServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\nServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServiceService,\n  factory: ServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAoBA,WAAW,EAAEC,UAAU,QAAO,sBAAsB;AACxE,SAASC,WAAW,QAAQ,6BAA6B;;;AAMzD,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAEhB,aAAQ,GAAGH,WAAW,CAAC,KAAK,CAAC,GAAG,gBAAgB;IAChD,YAAO,GAAGA,WAAW,CAAC,KAAK,CAAC,GAAG,iBAAiB;IAChD,gBAAW,GAAGA,WAAW,CAAC,KAAK,CAAC,GAAG,uBAAuB;EAJ3B;EAQvCI,QAAQ,CAACC,GAAW,EAAEC,GAAW,EAAEC,QAAgB,EAAEC,UAAkB;IACrE;IACA,IAAIC,MAAM,GAAG,IAAIV,UAAU,EAAE,CACxBW,GAAG,CAAC,KAAK,EAAEC,MAAM,CAACN,GAAG,CAAC,CAAC,CACvBK,GAAG,CAAC,KAAK,EAAEC,MAAM,CAACL,GAAG,CAAC,CAAC,CACvBI,GAAG,CAAC,UAAU,EAAEC,MAAM,CAACJ,QAAQ,CAAC,CAAC,CACjCG,GAAG,CAAC,YAAY,EAAEC,MAAM,CAACH,UAAU,CAAC,CAAC;IAE1C;IACA,OAAO,IAAI,CAACL,IAAI,CAACS,GAAG,CAAS,IAAI,CAACC,QAAQ,EAAE;MAAEJ,MAAM,EAAEA;IAAM,CAAE,CAAC;EACjE;EAEAK,MAAM,CAACC,SAAiB,EAAEC,QAAgB;IAExC;IACA,OAAO,IAAI,CAACb,IAAI,CAACS,GAAG,CAAM,IAAI,CAACK,OAAO,GAAG,IAAI,CAAC;EAChD;EAEAC,UAAU,CAACH,SAAiB,EAAEC,QAAgB;IAC5C;IACA,IAAIG,OAAO,GAAG,IAAIrB,WAAW,EAAE,CAC1BY,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAE5C;IACA,IAAIU,IAAI,GAAG;MACT,WAAW,EAAEL,SAAS;MACtB,UAAU,EAAEC,QAAQ;MACpB,KAAK,EAAE,EAAE;MACT,OAAO,EAAE,CAAC;MACV,KAAK,EAAE,MAAM;MACb,YAAY,EAAE,OAAO;MACrB,UAAU,EAAE;KACb;IAED;IACA,OAAO,IAAI,CAACb,IAAI,CAACkB,IAAI,CAAM,IAAI,CAACJ,OAAO,EAAEG,IAAI,EAAE;MAAED,OAAO,EAAEA;IAAO,CAAE,CAAC;EACtE;EAEAG,YAAY;IACV,OAAO,IAAI,CAACnB,IAAI,CAACS,GAAG,CAAM,IAAI,CAACW,WAAW,CAAC;EAC7C;EAEAC,UAAU,CAACnB,GAAW,EAAEoB,IAAY;IAClC,IAAIC,QAAQ,GAAG,mDAAmDrB,GAAG,cAAcoB,IAAI,kGAAkG;IAEzL,OAAO,IAAI,CAACtB,IAAI,CAACS,GAAG,CAAMc,QAAQ,CAAC;EACrC;;AAvDWzB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA0B,SAAd1B,cAAc;EAAA2B,YAFb;AAAM","names":["HttpHeaders","HttpParams","environment","ServiceService","constructor","http","getHikes","lat","lon","distance","difficulty","params","set","String","get","hikesUrl","signIn","firstName","lastName","userUrl","createUser","headers","body","post","getLocations","locationUrl","getWeather","long","endpoint","factory","providedIn"],"sourceRoot":"","sources":["/Users/lucas/Documents/FRI/frontend/src/app/services/service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\nimport { environment } from 'src/environment/environment';\nimport { Hike } from '../models/Hike';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServiceService {\n  constructor(private http: HttpClient) {}\n\n  private hikesUrl = environment['url'] + '/hike/v1/hikes';\n  private userUrl = environment['url'] + '/hiker/v1/users';\n  private locationUrl = environment['url'] + '/location/v1/location';\n\n\n\n  getHikes(lat: number, lon: number, distance: number, difficulty: number) {\n    // Define the parameters\n    let params = new HttpParams()\n        .set('lat', String(lat))\n        .set('lon', String(lon))\n        .set('distance', String(distance))\n        .set('difficulty', String(difficulty));\n\n    // Make the GET request and return the result\n    return this.http.get<Hike[]>(this.hikesUrl, { params: params });\n  }\n\n  signIn(firstName: string, lastName: string) {\n\n    // Make the GET request and return the result\n    return this.http.get<any>(this.userUrl + '/1');\n  }\n\n  createUser(firstName: string, lastName: string) {\n    // Define the headers\n    let headers = new HttpHeaders()\n        .set('Content-Type', 'application/json');\n\n    // Define the body\n    let body = {\n      \"firstName\": firstName,\n      \"lastName\": lastName,\n      \"age\": 25,\n      \"skill\": 1,\n      \"sex\": \"Male\",\n      \"longtitude\": 45.1234,\n      \"latitude\": 12.5678\n    };\n\n    // Make the POST request and return the result\n    return this.http.post<any>(this.userUrl, body, { headers: headers });\n  }\n\n  getLocations() {\n    return this.http.get<any>(this.locationUrl);\n  }\n\n  getWeather(lat: number, long: number) {\n    let endpoint = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${long}&current=temperature_2m,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m`;\n\n    return this.http.get<any>(endpoint);\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}